"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { 
  ArrowLeft, 
  Building, 
  MapPin, 
  Clock, 
  Users, 
  CreditCard, 
  X, 
  CheckCircle,
  AlertCircle,
  Phone,
  Mail,
  CalendarDays,
  Star,
  Shield,
  Eye,
  EyeOff,
  Save,
  RefreshCw
} from "lucide-react"
import { useRouter } from "next/navigation"
import DashboardHeader from "@/components/dashboard-header"

// Interfaces for form data
interface Address {
  line1: string
  area: string
  city: string
  state: string
  pincode: string
  country: string
}

interface BranchInfo {
  name: string
  code: string
  email: string
  phone: string
  address: Address
}

interface Timing {
  day: string
  open: string
  close: string
  isOpen: boolean
}

interface OperationalDetails {
  courses_offered: string[]
  timings: Timing[]
  holidays: string[]
}

interface Assignments {
  accessories_available: boolean
  courses: string[]
  branch_admins: string[]
}

interface BankDetails {
  bank_name: string
  account_number: string
  upi_id: string
}

interface FormData {
  branch: BranchInfo
  manager_id: string
  operational_details: OperationalDetails
  assignments: Assignments
  bank_details: BankDetails
}

export default function CreateBranchPage() {
  const router = useRouter()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showSuccessPopup, setShowSuccessPopup] = useState(false)
  const [errors, setErrors] = useState<{ [key: string]: string }>({})
  const [currentStep, setCurrentStep] = useState(1)
  const [showAccountNumber, setShowAccountNumber] = useState(false)
  const [formProgress, setFormProgress] = useState(0)

  const totalSteps = 6

  const [formData, setFormData] = useState<FormData>({
    branch: {
      name: "",
      code: "",
      email: "",
      phone: "",
      address: {
        line1: "",
        area: "",
        city: "",
        state: "",
        pincode: "",
        country: "India"
      }
    },
    manager_id: "",
    operational_details: {
      courses_offered: [],
      timings: [
        { day: "Monday", open: "07:00", close: "19:00", isOpen: true },
        { day: "Tuesday", open: "07:00", close: "19:00", isOpen: true },
        { day: "Wednesday", open: "07:00", close: "19:00", isOpen: true },
        { day: "Thursday", open: "07:00", close: "19:00", isOpen: true },
        { day: "Friday", open: "07:00", close: "19:00", isOpen: true },
        { day: "Saturday", open: "08:00", close: "18:00", isOpen: true },
        { day: "Sunday", open: "08:00", close: "16:00", isOpen: false }
      ],
      holidays: []
    },
    assignments: {
      accessories_available: false,
      courses: [],
      branch_admins: []
    },
    bank_details: {
      bank_name: "",
      account_number: "",
      upi_id: ""
    }
  })

  // Available options with enhanced data
  const availableManagers = [
    { id: "manager-uuid-1", name: "Ravi Kumar", experience: "8 years", rating: 4.8 },
    { id: "manager-uuid-2", name: "Priya Sharma", experience: "6 years", rating: 4.9 },
    { id: "manager-uuid-3", name: "Amit Singh", experience: "10 years", rating: 4.7 },
    { id: "manager-uuid-4", name: "Sunita Patel", experience: "5 years", rating: 4.6 }
  ]

  const availableCourses = [
    { id: "course-uuid-1", name: "Taekwondo Basics", level: "Beginner", duration: "3 months" },
    { id: "course-uuid-2", name: "Advanced Karate", level: "Advanced", duration: "6 months" },
    { id: "course-uuid-3", name: "Kung Fu Fundamentals", level: "Intermediate", duration: "4 months" },
    { id: "course-uuid-4", name: "Self Defense for Women", level: "Beginner", duration: "2 months" },
    { id: "course-uuid-5", name: "Mixed Martial Arts", level: "Advanced", duration: "8 months" },
    { id: "course-uuid-6", name: "Kids Martial Arts", level: "Kids", duration: "Ongoing" }
  ]

  const availableCoaches = [
    { id: "coach-uuid-1", name: "Master John Lee", specialty: "Taekwondo", rating: 4.9 },
    { id: "coach-uuid-2", name: "Coach Sarah Kim", specialty: "Karate", rating: 4.8 },
    { id: "coach-uuid-3", name: "Sensei David Wong", specialty: "Kung Fu", rating: 4.7 },
    { id: "coach-uuid-4", name: "Coach Maria Garcia", specialty: "MMA", rating: 4.8 }
  ]

  const bankOptions = [
    { name: "State Bank of India", code: "SBI" },
    { name: "HDFC Bank", code: "HDFC" },
    { name: "ICICI Bank", code: "ICICI" },
    { name: "Axis Bank", code: "AXIS" },
    { name: "Punjab National Bank", code: "PNB" },
    { name: "Bank of Baroda", code: "BOB" },
    { name: "Canara Bank", code: "CANARA" },
    { name: "Union Bank of India", code: "UBI" }
  ]

  const indianStates = [
    "Telangana", "Andhra Pradesh", "Karnataka", "Tamil Nadu", "Kerala", "Maharashtra", 
    "Gujarat", "Rajasthan", "Punjab", "Haryana", "Delhi", "Uttar Pradesh", "Bihar",
    "West Bengal", "Odisha", "Madhya Pradesh", "Chhattisgarh", "Jharkhand"
  ]

  // Calculate form progress
  useEffect(() => {
    const calculateProgress = () => {
      let filledFields = 0
      let totalFields = 0

      // Branch info (5 fields)
      const branchFields = [formData.branch.name, formData.branch.code, formData.branch.email, formData.branch.phone]
      filledFields += branchFields.filter(field => field.trim()).length
      totalFields += 4

      // Address (5 fields)
      const addressFields = [formData.branch.address.line1, formData.branch.address.area, formData.branch.address.city, formData.branch.address.state, formData.branch.address.pincode]
      filledFields += addressFields.filter(field => field.trim()).length
      totalFields += 5

      // Manager (1 field)
      if (formData.manager_id) filledFields += 1
      totalFields += 1

      // Courses offered (1 field)
      if (formData.operational_details.courses_offered.length > 0) filledFields += 1
      totalFields += 1

      // Assignments (1 field)
      if (formData.assignments.courses.length > 0) filledFields += 1
      totalFields += 1

      const progress = Math.round((filledFields / totalFields) * 100)
      setFormProgress(progress)
    }

    calculateProgress()
  }, [formData])

  // Helper functions
  const handleCoursesOfferedToggle = (course: string) => {
    setFormData(prev => ({
      ...prev,
      operational_details: {
        ...prev.operational_details,
        courses_offered: prev.operational_details.courses_offered.includes(course)
          ? prev.operational_details.courses_offered.filter(c => c !== course)
          : [...prev.operational_details.courses_offered, course]
      }
    }))
  }

  const handleCourseAssignmentToggle = (courseId: string) => {
    setFormData(prev => ({
      ...prev,
      assignments: {
        ...prev.assignments,
        courses: prev.assignments.courses.includes(courseId)
          ? prev.assignments.courses.filter(c => c !== courseId)
          : [...prev.assignments.courses, courseId]
      }
    }))
  }

  const handleBranchAdminToggle = (coachId: string) => {
    setFormData(prev => ({
      ...prev,
      assignments: {
        ...prev.assignments,
        branch_admins: prev.assignments.branch_admins.includes(coachId)
          ? prev.assignments.branch_admins.filter(c => c !== coachId)
          : [...prev.assignments.branch_admins, coachId]
      }
    }))
  }

  const handleTimingChange = (dayIndex: number, field: 'open' | 'close' | 'isOpen', value: string | boolean) => {
    setFormData(prev => ({
      ...prev,
      operational_details: {
        ...prev.operational_details,
        timings: prev.operational_details.timings.map((timing, index) =>
          index === dayIndex ? { ...timing, [field]: value } : timing
        )
      }
    }))
  }

  const addHoliday = (date: string) => {
    if (date && !formData.operational_details.holidays.includes(date)) {
      setFormData(prev => ({
        ...prev,
        operational_details: {
          ...prev.operational_details,
          holidays: [...prev.operational_details.holidays, date]
        }
      }))
    }
  }

  const removeHoliday = (date: string) => {
    setFormData(prev => ({
      ...prev,
      operational_details: {
        ...prev.operational_details,
        holidays: prev.operational_details.holidays.filter(h => h !== date)
      }
    }))
  }

  const generateBranchCode = () => {
    const name = formData.branch.name.trim()
    if (name) {
      const code = name.split(' ').map(word => word.slice(0, 2).toUpperCase()).join('') + '01'
      setFormData(prev => ({
        ...prev,
        branch: { ...prev.branch, code }
      }))
    }
  }

  const validateStep = (step: number) => {
    const newErrors: { [key: string]: string } = {}

    switch (step) {
      case 1: // Branch Information
        if (!formData.branch.name.trim()) newErrors.branchName = "Branch name is required"
        if (!formData.branch.code.trim()) newErrors.branchCode = "Branch code is required"
        if (!formData.branch.email.trim()) newErrors.branchEmail = "Branch email is required"
        else if (!/\S+@\S+\.\S+/.test(formData.branch.email)) newErrors.branchEmail = "Invalid email format"
        if (!formData.branch.phone.trim()) newErrors.branchPhone = "Branch phone is required"
        else if (!/^\+?[\d\s-()]{10,}$/.test(formData.branch.phone)) newErrors.branchPhone = "Invalid phone format"
        break

      case 2: // Address Information
        if (!formData.branch.address.line1.trim()) newErrors.addressLine1 = "Address line 1 is required"
        if (!formData.branch.address.area.trim()) newErrors.addressArea = "Area is required"
        if (!formData.branch.address.city.trim()) newErrors.addressCity = "City is required"
        if (!formData.branch.address.state.trim()) newErrors.addressState = "State is required"
        if (!formData.branch.address.pincode.trim()) newErrors.addressPincode = "Pincode is required"
        else if (!/^\d{6}$/.test(formData.branch.address.pincode)) newErrors.addressPincode = "Invalid pincode format"
        break

      case 4: // Operational Details
        if (formData.operational_details.courses_offered.length === 0) {
          newErrors.coursesOffered = "At least one course offering is required"
        }
        break
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, totalSteps))
    }
  }

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1))
  }

  const validateForm = () => {
    let isValid = true
    for (let i = 1; i <= totalSteps; i++) {
      if (!validateStep(i)) {
        isValid = false
      }
    }
    return isValid
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) {
      setCurrentStep(1) // Go to first step with errors
      return
    }

    setIsSubmitting(true)

    try {
      const token = localStorage.getItem('authToken') || 'mock-jwt-token'

      const response = await fetch('/api/branches', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(formData)
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to create branch')
      }

      console.log('Branch created successfully:', result)
      setShowSuccessPopup(true)
      
      setTimeout(() => {
        setShowSuccessPopup(false)
        router.push("/dashboard/branches")
      }, 3000)
      
    } catch (error) {
      console.error('Error creating branch:', error)
      alert(`Error creating branch: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  const resetForm = () => {
    setFormData({
      branch: {
        name: "",
        code: "",
        email: "",
        phone: "",
        address: {
          line1: "",
          area: "",
          city: "",
          state: "",
          pincode: "",
          country: "India"
        }
      },
      manager_id: "",
      operational_details: {
        courses_offered: [],
        timings: [
          { day: "Monday", open: "07:00", close: "19:00", isOpen: true },
          { day: "Tuesday", open: "07:00", close: "19:00", isOpen: true },
          { day: "Wednesday", open: "07:00", close: "19:00", isOpen: true },
          { day: "Thursday", open: "07:00", close: "19:00", isOpen: true },
          { day: "Friday", open: "07:00", close: "19:00", isOpen: true },
          { day: "Saturday", open: "08:00", close: "18:00", isOpen: true },
          { day: "Sunday", open: "08:00", close: "16:00", isOpen: false }
        ],
        holidays: []
      },
      assignments: {
        accessories_available: false,
        courses: [],
        branch_admins: []
      },
      bank_details: {
        bank_name: "",
        account_number: "",
        upi_id: ""
      }
    })
    setCurrentStep(1)
    setErrors({})
    setFormProgress(0)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <DashboardHeader currentPage="Create Branch" />

      <main className="w-full p-4 lg:p-6 max-w-7xl mx-auto">
        {/* Enhanced Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                onClick={() => router.push("/dashboard/branches")}
                className="flex items-center space-x-2 hover:bg-white/70 transition-all duration-200"
              >
                <ArrowLeft className="w-4 h-4" />
                <span>Back to Branches</span>
              </Button>
              <Separator orientation="vertical" className="h-6" />
              <div>
                <h1 className="text-3xl font-bold text-gray-900 flex items-center space-x-3">
                  <Building className="w-8 h-8 text-yellow-600" />
                  <span>Create New Branch</span>
                </h1>
                <p className="text-gray-600 mt-1">Set up a new martial arts branch with complete configuration</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Button
                type="button"
                variant="outline"
                onClick={resetForm}
                className="flex items-center space-x-2"
              >
                <RefreshCw className="w-4 h-4" />
                <span>Reset Form</span>
              </Button>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="bg-white rounded-lg p-4 shadow-sm border">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Form Progress</span>
              <span className="text-sm text-gray-600">{formProgress}% Complete</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-yellow-400 to-yellow-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${formProgress}%` }}
              />
            </div>
          </div>

          {/* Step Navigation */}
          <div className="mt-6">
            <div className="flex items-center justify-between">
              {[1, 2, 3, 4, 5, 6].map((step, index) => (
                <div key={step} className="flex items-center">
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-all duration-200 ${
                      currentStep === step
                        ? 'bg-yellow-500 text-white shadow-lg'
                        : currentStep > step
                        ? 'bg-green-500 text-white'
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {currentStep > step ? <CheckCircle className="w-5 h-5" /> : step}
                  </div>
                  {index < 5 && (
                    <div
                      className={`flex-1 h-1 mx-2 transition-all duration-200 ${
                        currentStep > step ? 'bg-green-500' : 'bg-gray-200'
                      }`}
                    />
                  )}
                </div>
              ))}
            </div>
            <div className="flex justify-between mt-2 text-xs text-gray-600">
              <span>Basic Info</span>
              <span>Address</span>
              <span>Manager</span>
              <span>Operations</span>
              <span>Assignments</span>
              <span>Banking</span>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Step 1: Branch Information */}
          {currentStep === 1 && (
            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center space-x-3 text-xl">
                  <Building className="w-6 h-6" />
                  <span>Branch Information</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <Label htmlFor="branchName" className="text-sm font-semibold text-gray-700">
                      Branch Name *
                    </Label>
                    <Input
                      id="branchName"
                      value={formData.branch.name}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: { ...formData.branch, name: e.target.value }
                      })}
                      placeholder="Enter branch name (e.g., Rock Martial Arts)"
                      className={`h-12 ${errors.branchName ? "border-red-500 focus:border-red-500" : "focus:border-yellow-500"} transition-all duration-200`}
                    />
                    {errors.branchName && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.branchName}</span>
                      </div>
                    )}
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="branchCode" className="text-sm font-semibold text-gray-700">
                      Branch Code *
                    </Label>
                    <div className="flex space-x-2">
                      <Input
                        id="branchCode"
                        value={formData.branch.code}
                        onChange={(e) => setFormData({
                          ...formData,
                          branch: { ...formData.branch, code: e.target.value.toUpperCase() }
                        })}
                        placeholder="Enter branch code (e.g., RMA01)"
                        className={`h-12 ${errors.branchCode ? "border-red-500" : "focus:border-yellow-500"} transition-all duration-200`}
                      />
                      <Button
                        type="button"
                        variant="outline"
                        onClick={generateBranchCode}
                        className="h-12 px-4 hover:bg-yellow-50"
                      >
                        Auto
                      </Button>
                    </div>
                    {errors.branchCode && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.branchCode}</span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <Label htmlFor="branchEmail" className="text-sm font-semibold text-gray-700 flex items-center space-x-2">
                      <Mail className="w-4 h-4" />
                      <span>Email Address *</span>
                    </Label>
                    <Input
                      id="branchEmail"
                      type="email"
                      value={formData.branch.email}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: { ...formData.branch, email: e.target.value }
                      })}
                      placeholder="Enter branch email"
                      className={`h-12 ${errors.branchEmail ? "border-red-500" : "focus:border-yellow-500"} transition-all duration-200`}
                    />
                    {errors.branchEmail && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.branchEmail}</span>
                      </div>
                    )}
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="branchPhone" className="text-sm font-semibold text-gray-700 flex items-center space-x-2">
                      <Phone className="w-4 h-4" />
                      <span>Phone Number *</span>
                    </Label>
                    <Input
                      id="branchPhone"
                      value={formData.branch.phone}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: { ...formData.branch, phone: e.target.value }
                      })}
                      placeholder="Enter phone number (+91 XXXXXXXXXX)"
                      className={`h-12 ${errors.branchPhone ? "border-red-500" : "focus:border-yellow-500"} transition-all duration-200`}
                    />
                    {errors.branchPhone && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.branchPhone}</span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="flex justify-end pt-4">
                  <Button
                    type="button"
                    onClick={nextStep}
                    className="bg-yellow-500 hover:bg-yellow-600 text-white px-8 h-12"
                  >
                    Next Step
                    <ArrowLeft className="w-4 h-4 ml-2 rotate-180" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Step 2: Address Information */}
          {currentStep === 2 && (
            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center space-x-3 text-xl">
                  <MapPin className="w-6 h-6" />
                  <span>Address Information</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <Label htmlFor="addressLine1" className="text-sm font-semibold text-gray-700">
                      Address Line 1 *
                    </Label>
                    <Input
                      id="addressLine1"
                      value={formData.branch.address.line1}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: {
                          ...formData.branch,
                          address: { ...formData.branch.address, line1: e.target.value }
                        }
                      })}
                      placeholder="Building/House number and street"
                      className={`h-12 ${errors.addressLine1 ? "border-red-500" : "focus:border-blue-500"} transition-all duration-200`}
                    />
                    {errors.addressLine1 && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.addressLine1}</span>
                      </div>
                    )}
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="addressArea" className="text-sm font-semibold text-gray-700">
                      Area/Locality *
                    </Label>
                    <Input
                      id="addressArea"
                      value={formData.branch.address.area}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: {
                          ...formData.branch,
                          address: { ...formData.branch.address, area: e.target.value }
                        }
                      })}
                      placeholder="Area/Locality (e.g., Madhapur)"
                      className={`h-12 ${errors.addressArea ? "border-red-500" : "focus:border-blue-500"} transition-all duration-200`}
                    />
                    {errors.addressArea && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.addressArea}</span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="space-y-3">
                    <Label htmlFor="addressCity" className="text-sm font-semibold text-gray-700">
                      City *
                    </Label>
                    <Input
                      id="addressCity"
                      value={formData.branch.address.city}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: {
                          ...formData.branch,
                          address: { ...formData.branch.address, city: e.target.value }
                        }
                      })}
                      placeholder="City"
                      className={`h-12 ${errors.addressCity ? "border-red-500" : "focus:border-blue-500"} transition-all duration-200`}
                    />
                    {errors.addressCity && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.addressCity}</span>
                      </div>
                    )}
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="addressState" className="text-sm font-semibold text-gray-700">
                      State *
                    </Label>
                    <Select
                      value={formData.branch.address.state}
                      onValueChange={(value) => setFormData({
                        ...formData,
                        branch: {
                          ...formData.branch,
                          address: { ...formData.branch.address, state: value }
                        }
                      })}
                    >
                      <SelectTrigger className={`h-12 ${errors.addressState ? "border-red-500" : "focus:border-blue-500"}`}>
                        <SelectValue placeholder="Select state" />
                      </SelectTrigger>
                      <SelectContent>
                        {indianStates.map((state) => (
                          <SelectItem key={state} value={state}>
                            {state}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.addressState && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.addressState}</span>
                      </div>
                    )}
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="addressPincode" className="text-sm font-semibold text-gray-700">
                      Pincode *
                    </Label>
                    <Input
                      id="addressPincode"
                      value={formData.branch.address.pincode}
                      onChange={(e) => setFormData({
                        ...formData,
                        branch: {
                          ...formData.branch,
                          address: { ...formData.branch.address, pincode: e.target.value }
                        }
                      })}
                      placeholder="Pincode"
                      maxLength={6}
                      className={`h-12 ${errors.addressPincode ? "border-red-500" : "focus:border-blue-500"} transition-all duration-200`}
                    />
                    {errors.addressPincode && (
                      <div className="flex items-center space-x-2 text-red-600 text-sm">
                        <AlertCircle className="w-4 h-4" />
                        <span>{errors.addressPincode}</span>
                      </div>
                    )}
                  </div>

                  <div className="space-y-3">
                    <Label htmlFor="addressCountry" className="text-sm font-semibold text-gray-700">
                      Country
                    </Label>
                    <Select
                      value={formData.branch.address.country}
                      onValueChange={(value) => setFormData({
                        ...formData,
                        branch: {
                          ...formData.branch,
                          address: { ...formData.branch.address, country: value }
                        }
                      })}
                    >
                      <SelectTrigger className="h-12">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="India">India</SelectItem>
                        <SelectItem value="USA">USA</SelectItem>
                        <SelectItem value="UK">UK</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="flex justify-between pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={prevStep}
                    className="px-8 h-12"
                  >
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    Previous
                  </Button>
                  <Button
                    type="button"
                    onClick={nextStep}
                    className="bg-blue-500 hover:bg-blue-600 text-white px-8 h-12"
                  >
                    Next Step
                    <ArrowLeft className="w-4 h-4 ml-2 rotate-180" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
      setFormData(prev => ({
        ...prev,
        operational_details: {
          ...prev.operational_details,
          holidays: [...prev.operational_details.holidays, date]
        }
      }))
    }
  }

  const removeHoliday = (date: string) => {
    setFormData(prev => ({
      ...prev,
      operational_details: {
        ...prev.operational_details,
        holidays: prev.operational_details.holidays.filter(h => h !== date)
      }
    }))
  }

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {}

    // Branch validation
    if (!formData.branch.name.trim()) newErrors.branchName = "Branch name is required"
    if (!formData.branch.code.trim()) newErrors.branchCode = "Branch code is required"
    if (!formData.branch.email.trim()) newErrors.branchEmail = "Branch email is required"
    if (!formData.branch.phone.trim()) newErrors.branchPhone = "Branch phone is required"
    
    // Address validation
    if (!formData.branch.address.line1.trim()) newErrors.addressLine1 = "Address line 1 is required"
    if (!formData.branch.address.area.trim()) newErrors.addressArea = "Area is required"
    if (!formData.branch.address.city.trim()) newErrors.addressCity = "City is required"
    if (!formData.branch.address.state.trim()) newErrors.addressState = "State is required"
    if (!formData.branch.address.pincode.trim()) newErrors.addressPincode = "Pincode is required"

    // Operational details validation
    if (formData.operational_details.courses_offered.length === 0) {
      newErrors.coursesOffered = "At least one course offering is required"
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) {
      return
    }

    setIsSubmitting(true)

    try {
      // Get the token from localStorage (in a real app, this would come from your auth context)
      const token = localStorage.getItem('authToken') || 'mock-jwt-token'

      const response = await fetch('/api/branches', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(formData)
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Failed to create branch')
      }

      console.log('Branch created successfully:', result)
      setShowSuccessPopup(true)
      
      setTimeout(() => {
        setShowSuccessPopup(false)
        router.push("/dashboard/branches")
      }, 2000)
      
    } catch (error) {
      console.error('Error creating branch:', error)
      alert(`Error creating branch: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <DashboardHeader currentPage="Create Branch" />

      <main className="w-full p-4 lg:p-6">
        {/* Header with Back Button */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <Button
              variant="ghost"
              onClick={() => router.push("/dashboard/branches")}
              className="flex items-center space-x-2 hover:bg-gray-100"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Branches</span>
            </Button>
            <div className="w-px h-6 bg-gray-300"></div>
            <h1 className="text-2xl font-bold text-gray-900">Create New Branch</h1>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Branch Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Building className="w-5 h-5 text-yellow-600" />
                <span>Branch Information</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="branchName">Branch Name *</Label>
                  <Input
                    id="branchName"
                    value={formData.branch.name}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: { ...formData.branch, name: e.target.value }
                    })}
                    placeholder="Enter branch name"
                    className={errors.branchName ? "border-red-500" : ""}
                  />
                  {errors.branchName && <p className="text-red-500 text-sm">{errors.branchName}</p>}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="branchCode">Branch Code *</Label>
                  <Input
                    id="branchCode"
                    value={formData.branch.code}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: { ...formData.branch, code: e.target.value }
                    })}
                    placeholder="Enter branch code (e.g., RMA01)"
                    className={errors.branchCode ? "border-red-500" : ""}
                  />
                  {errors.branchCode && <p className="text-red-500 text-sm">{errors.branchCode}</p>}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="branchEmail">Email *</Label>
                  <Input
                    id="branchEmail"
                    type="email"
                    value={formData.branch.email}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: { ...formData.branch, email: e.target.value }
                    })}
                    placeholder="Enter branch email"
                    className={errors.branchEmail ? "border-red-500" : ""}
                  />
                  {errors.branchEmail && <p className="text-red-500 text-sm">{errors.branchEmail}</p>}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="branchPhone">Phone *</Label>
                  <Input
                    id="branchPhone"
                    value={formData.branch.phone}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: { ...formData.branch, phone: e.target.value }
                    })}
                    placeholder="Enter phone number"
                    className={errors.branchPhone ? "border-red-500" : ""}
                  />
                  {errors.branchPhone && <p className="text-red-500 text-sm">{errors.branchPhone}</p>}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Address Information */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <MapPin className="w-5 h-5 text-yellow-600" />
                <span>Address Information</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="addressLine1">Address Line 1 *</Label>
                  <Input
                    id="addressLine1"
                    value={formData.branch.address.line1}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: {
                        ...formData.branch,
                        address: { ...formData.branch.address, line1: e.target.value }
                      }
                    })}
                    placeholder="Building/House number and street"
                    className={errors.addressLine1 ? "border-red-500" : ""}
                  />
                  {errors.addressLine1 && <p className="text-red-500 text-sm">{errors.addressLine1}</p>}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="addressArea">Area *</Label>
                  <Input
                    id="addressArea"
                    value={formData.branch.address.area}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: {
                        ...formData.branch,
                        address: { ...formData.branch.address, area: e.target.value }
                      }
                    })}
                    placeholder="Area/Locality"
                    className={errors.addressArea ? "border-red-500" : ""}
                  />
                  {errors.addressArea && <p className="text-red-500 text-sm">{errors.addressArea}</p>}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="addressCity">City *</Label>
                  <Input
                    id="addressCity"
                    value={formData.branch.address.city}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: {
                        ...formData.branch,
                        address: { ...formData.branch.address, city: e.target.value }
                      }
                    })}
                    placeholder="City"
                    className={errors.addressCity ? "border-red-500" : ""}
                  />
                  {errors.addressCity && <p className="text-red-500 text-sm">{errors.addressCity}</p>}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="addressState">State *</Label>
                  <Input
                    id="addressState"
                    value={formData.branch.address.state}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: {
                        ...formData.branch,
                        address: { ...formData.branch.address, state: e.target.value }
                      }
                    })}
                    placeholder="State"
                    className={errors.addressState ? "border-red-500" : ""}
                  />
                  {errors.addressState && <p className="text-red-500 text-sm">{errors.addressState}</p>}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="addressPincode">Pincode *</Label>
                  <Input
                    id="addressPincode"
                    value={formData.branch.address.pincode}
                    onChange={(e) => setFormData({
                      ...formData,
                      branch: {
                        ...formData.branch,
                        address: { ...formData.branch.address, pincode: e.target.value }
                      }
                    })}
                    placeholder="Pincode"
                    className={errors.addressPincode ? "border-red-500" : ""}
                  />
                  {errors.addressPincode && <p className="text-red-500 text-sm">{errors.addressPincode}</p>}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="addressCountry">Country</Label>
                  <Select
                    value={formData.branch.address.country}
                    onValueChange={(value) => setFormData({
                      ...formData,
                      branch: {
                        ...formData.branch,
                        address: { ...formData.branch.address, country: value }
                      }
                    })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="India">India</SelectItem>
                      <SelectItem value="USA">USA</SelectItem>
                      <SelectItem value="UK">UK</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Branch Manager */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Users className="w-5 h-5 text-yellow-600" />
                <span>Branch Manager</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Label htmlFor="managerId">Select Branch Manager</Label>
                <Select
                  value={formData.manager_id}
                  onValueChange={(value) => setFormData({ ...formData, manager_id: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a manager" />
                  </SelectTrigger>
                  <SelectContent>
                    {availableManagers.map((manager) => (
                      <SelectItem key={manager.id} value={manager.id}>
                        {manager.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Operational Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Clock className="w-5 h-5 text-yellow-600" />
                <span>Operational Details</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Courses Offered */}
              <div className="space-y-2">
                <Label>Courses Offered *</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {availableCourses.map((course) => (
                    <div key={course.name} className="flex items-center space-x-2">
                      <Checkbox
                        id={`course-offered-${course.name}`}
                        checked={formData.operational_details.courses_offered.includes(course.name)}
                        onCheckedChange={() => handleCoursesOfferedToggle(course.name)}
                      />
                      <Label htmlFor={`course-offered-${course.name}`} className="text-sm cursor-pointer">
                        {course.name}
                      </Label>
                    </div>
                  ))}
                </div>
                {errors.coursesOffered && <p className="text-red-500 text-sm">{errors.coursesOffered}</p>}
                
                {formData.operational_details.courses_offered.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.operational_details.courses_offered.map((course) => (
                      <Badge key={course} variant="secondary" className="bg-yellow-100 text-yellow-800">
                        {course}
                        <button
                          type="button"
                          onClick={() => handleCoursesOfferedToggle(course)}
                          className="ml-2 hover:text-red-600"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              {/* Operating Hours */}
              <div className="space-y-2">
                <Label>Operating Hours</Label>
                <div className="space-y-3">
                  {formData.operational_details.timings.map((timing, index) => (
                    <div key={timing.day} className="grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
                      <div className="font-medium text-sm">{timing.day}</div>
                      <div className="space-y-1">
                        <Label className="text-xs">Open Time</Label>
                        <Input
                          type="time"
                          value={timing.open}
                          onChange={(e) => handleTimingChange(index, 'open', e.target.value)}
                        />
                      </div>
                      <div className="space-y-1">
                        <Label className="text-xs">Close Time</Label>
                        <Input
                          type="time"
                          value={timing.close}
                          onChange={(e) => handleTimingChange(index, 'close', e.target.value)}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Holidays */}
              <div className="space-y-2">
                <Label>Holidays</Label>
                <div className="flex space-x-2">
                  <Input
                    type="date"
                    id="holidayDate"
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault()
                        const input = e.target as HTMLInputElement
                        addHoliday(input.value)
                        input.value = ''
                      }
                    }}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      const input = document.getElementById('holidayDate') as HTMLInputElement
                      addHoliday(input.value)
                      input.value = ''
                    }}
                  >
                    Add Holiday
                  </Button>
                </div>
                
                {formData.operational_details.holidays.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.operational_details.holidays.map((holiday) => (
                      <Badge key={holiday} variant="secondary" className="bg-blue-100 text-blue-800">
                        {holiday}
                        <button
                          type="button"
                          onClick={() => removeHoliday(holiday)}
                          className="ml-2 hover:text-red-600"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Assignments */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Users className="w-5 h-5 text-yellow-600" />
                <span>Course & Staff Assignments</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Accessories Available */}
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="accessoriesAvailable"
                  checked={formData.assignments.accessories_available}
                  onCheckedChange={(checked) => setFormData({
                    ...formData,
                    assignments: { ...formData.assignments, accessories_available: !!checked }
                  })}
                />
                <Label htmlFor="accessoriesAvailable">Accessories Available at Branch</Label>
              </div>

              {/* Course Assignments */}
              <div className="space-y-2">
                <Label>Assign Courses to Branch</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {availableCourses.map((course) => (
                    <div key={course.id} className="flex items-center space-x-2">
                      <Checkbox
                        id={`course-assign-${course.id}`}
                        checked={formData.assignments.courses.includes(course.id)}
                        onCheckedChange={() => handleCourseAssignmentToggle(course.id)}
                      />
                      <Label htmlFor={`course-assign-${course.id}`} className="text-sm cursor-pointer">
                        {course.name}
                      </Label>
                    </div>
                  ))}
                </div>
                
                {formData.assignments.courses.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.assignments.courses.map((courseId) => {
                      const course = availableCourses.find(c => c.id === courseId)
                      return course ? (
                        <Badge key={courseId} variant="secondary" className="bg-green-100 text-green-800">
                          {course.name}
                          <button
                            type="button"
                            onClick={() => handleCourseAssignmentToggle(courseId)}
                            className="ml-2 hover:text-red-600"
                          >
                            <X className="w-3 h-3" />
                          </button>
                        </Badge>
                      ) : null
                    })}
                  </div>
                )}
              </div>

              {/* Branch Admins */}
              <div className="space-y-2">
                <Label>Assign Branch Admins</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {availableCoaches.map((coach) => (
                    <div key={coach.id} className="flex items-center space-x-2">
                      <Checkbox
                        id={`admin-${coach.id}`}
                        checked={formData.assignments.branch_admins.includes(coach.id)}
                        onCheckedChange={() => handleBranchAdminToggle(coach.id)}
                      />
                      <Label htmlFor={`admin-${coach.id}`} className="text-sm cursor-pointer">
                        {coach.name}
                      </Label>
                    </div>
                  ))}
                </div>
                
                {formData.assignments.branch_admins.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.assignments.branch_admins.map((coachId) => {
                      const coach = availableCoaches.find(c => c.id === coachId)
                      return coach ? (
                        <Badge key={coachId} variant="secondary" className="bg-purple-100 text-purple-800">
                          {coach.name}
                          <button
                            type="button"
                            onClick={() => handleBranchAdminToggle(coachId)}
                            className="ml-2 hover:text-red-600"
                          >
                            <X className="w-3 h-3" />
                          </button>
                        </Badge>
                      ) : null
                    })}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Bank Details */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <CreditCard className="w-5 h-5 text-yellow-600" />
                <span>Bank Details</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="bankName">Bank Name</Label>
                  <Select
                    value={formData.bank_details.bank_name}
                    onValueChange={(value) => setFormData({
                      ...formData,
                      bank_details: { ...formData.bank_details, bank_name: value }
                    })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select bank" />
                    </SelectTrigger>
                    <SelectContent>
                      {bankOptions.map((bank) => (
                        <SelectItem key={bank} value={bank}>
                          {bank}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="accountNumber">Account Number</Label>
                  <Input
                    id="accountNumber"
                    value={formData.bank_details.account_number}
                    onChange={(e) => setFormData({
                      ...formData,
                      bank_details: { ...formData.bank_details, account_number: e.target.value }
                    })}
                    placeholder="Enter account number"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="upiId">UPI ID</Label>
                <Input
                  id="upiId"
                  value={formData.bank_details.upi_id}
                  onChange={(e) => setFormData({
                    ...formData,
                    bank_details: { ...formData.bank_details, upi_id: e.target.value }
                  })}
                  placeholder="Enter UPI ID (e.g., name@ybl)"
                />
              </div>
            </CardContent>
          </Card>

          {/* Form Actions */}
          <div className="flex justify-end space-x-4 py-6">
            <Button
              type="button"
              variant="outline"
              onClick={() => router.push("/dashboard/branches")}
              disabled={isSubmitting}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="bg-yellow-400 hover:bg-yellow-500 text-black"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <div className="flex items-center space-x-2">
                  <div className="w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin"></div>
                  <span>Creating Branch...</span>
                </div>
              ) : (
                "Create Branch"
              )}
            </Button>
          </div>
        </form>
      </main>

      {/* Success Popup */}
      {showSuccessPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4 text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Branch Created Successfully!</h3>
            <p className="text-gray-600 mb-4">The new branch has been added to your system.</p>
            <div className="w-6 h-6 border-2 border-yellow-400 border-t-transparent rounded-full animate-spin mx-auto"></div>
          </div>
        </div>
      )}
    </div>
  )
}
